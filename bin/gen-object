#!/bin/sh
OBJECT_TYPE="$1"
shift
GENERATOR_PARAMS="$@"

#
# Outputs the relative path between two paths, specifically, from
# starting path to destination path.  That is, if you were in the
# starting path dir and did "cd <result of relpath>", you'd end up
# in destination path dir.
# Params:
# $1 - destination path
# $2 - starting path
#
function relpath {
	# Call php relpath function (see relpath.php), but trim off
	# the leading "./" it always prepends
	$PHP "$MY_BIN_DIR/relpath.php" "$1" "$2" | sed -E 's/^\.\///g'
}

#
# Generate one file for the supplied type of thing, using the supplied generator
# Params:
# $1 - type of thing, e.g. "view"
# $2 - generator, e.g. "html"
# $3... - params to be passed to the generator
#
function generate {

	local GEN="$1"
	local ASPECT="$2"
	local GEN_EXE="$GEN/gen-$ASPECT"
	shift;shift

	# Try to execute the specific gen type, but if that doesn't exist or fails,
	# try to execute the generic generator for this object type and pass it
	# the aspect to be generated.
	execute "$GEN_EXE" "$@"
	if [ $? -ne 0 ]; then
		execute "$GEN/generate" "$ASPECT" "$@"
		if [ $? -ne 0 ]; then
			err "Don't know how to generate $2 for $1"
		fi
	fi
}

function doExecute {
	local RET=1
	local EXE="$1/$2"

	shift;shift
	
	# If the requested file exists, execute it
	# If it doesn't return an error
	if [[ -f "$EXE" ]]; then
		if [[ -x "$EXE" ]]; then
			"$EXE" "$@"
		else
			sh "$EXE" "$@"
		fi
		RET=0
	fi
	
	return $RET

}

#
# Execute the specified generator script, or print an error if the script
# doesn't exist
#
function execute {
	doExecute "$MINE_GEN_BASE_DIR" "$@"
	local RET=$?
		
	if [ $RET -ne 0 ]; then
		doExecute "$GEN_BASE_DIR" "$@"
		RET=$?
	fi

	return $RET
}

function fail_if_exists {
	if [[ -e "$1" && $FORCE = false ]]; then
		fail "$1 already exists.  Use the --force if you want to overwrite"
	fi
}

#
# Log a message about a directory.  This is intended to be used by a generator
# to indicate that it is operating in a particular directory.
#
function log_dir {
	msg
	msg "$1"
}

#
# Log a message about file that is being generated.  This is intended to be used
# by a generator to indicate it is generating a file
#
function log_file {
	msg "  $1"
}

# Export functions so sub-processes (e.g. generators) can use them
export -f template relpath fail_if_exists log_dir log_file

#
# Ok, go!
# Generate files
#
msg "Generating $OBJECT_TYPE"

export MY_DIR="${GEN_BASE_DIR}/$OBJECT_TYPE"

# Run type-specific setup if present
load "$OBJECT_TYPE/setup"

# Check to see if user has overridden the list of generators
# TODO: Parse user-specified generator list from OBJECT_TYPE when
# it is of the form my.object.type:generator1,generator2,etc
#GENERATORS=${USER_GENERATORS:-$GENERATORS}

# If there are no generators to run, exit with an error
if [[ "$GENERATORS" = "" ]]; then
	fail "No generators specified on command line and no default generators configured for $OBJECT_TYPE"
fi

# Run all generators
for GEN in $GENERATORS
do
	generate "$OBJECT_TYPE" "$GEN" "$GENERATOR_PARAMS"
done

# Run type-specific teardown if present
load "$OBJECT_TYPE/teardown"
